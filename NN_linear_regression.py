# -*- coding: utf-8 -*-
"""–ö–æ–ø–∏—è_–±–ª–æ–∫–Ω–æ—Ç–∞__–ø—Ä–∞–∫—Ç–∏–∫–∞_2_16_11_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1neELNvahgEVdv9bdu2BvGj_Zc2txvUej

# **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 2**
–ó–∞–¥–∞—á–∏:
–î–ª—è 1 –∏ 2-–π –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç insurance
1. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä (1 –±–∞–ª–ª–∞)
2. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (bmi) **–∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π** –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ, —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥. –û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ:
  1. –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Ç–æ–ª—å–∫–æ –∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ (1 –±–∞–ª–ª)
  2. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (1 –±–∞–ª–ª)
  3. –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∏–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ, —Ç.–µ. —Ñ—É–Ω–∫—Ü–∏—è –æ—à–∏–±–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è (1 –±–∞–ª–ª)
3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –æ–¥–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è (2 –±–∞–ª–ª–∞)
4. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–¥–∞—á–∏ 3 —Å **–±–æ–ª–µ–µ —á–µ–º** –æ–¥–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Å–ª–æ—è (–≤—ã—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ 1) (2.5 –±–∞–ª–ª–∞)
5. (–ë–æ–Ω—É—Å) –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å **—Ç—Ä–µ–º—è —Å–ª–æ—è–º–∏** –∏ –æ—à–∏–±–∫–æ–π **–Ω–µ –±–æ–ª–µ–µ 0.25** (1.5 –±–∞–ª–ª–∞)

–í —ç—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º insurance, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª—é–¥—è—Ö —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥. –û–±—â–∏–π "—Å–∫–µ–ª–µ—Ç" –º–æ–¥–µ–ª–µ–π –≥–æ—Ç–æ–≤, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –æ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –∑–∞–¥–∞–Ω–∏—è.
–ì–æ—Ç–æ–≤—ã–π –∫–æ–¥ –≤ —è—á–µ–π–∫–∞—Ö **–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å***, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≥–ª–∞–≤–Ω–æ–µ - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á.

*–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –º–µ–Ω—è—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏–ª–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ 3-5 –∑–∞–¥–∞–Ω–∏—è—Ö –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é - —á–∏—Ç–∏–Ω–≥ üò¨

*–ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π –Ω–∞–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–æ–º –¥–∞—Ç–∞—Å–µ—Ç–∞* **med.zip**.

## 1. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä (1 –±–∞–ª–ª)
–ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–µ–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤—ã–≤–æ–¥.
"""

import torch
import torchvision
import torch.nn as nn
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import torch.nn.functional as F
from torchvision.datasets.utils import download_url
from torch.utils.data import DataLoader, TensorDataset, random_split
import numpy as np

!unzip 'med.zip'
!ls

data = pd.read_csv("insurance.csv")
data.head()

data.info()

data['bmi']

"""–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""

plt.figure(figsize=(10, 7))
plt.scatter(data['bmi'], data['charges'])
plt.xlabel('–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞') # –ü–æ–¥–ø–∏—à–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏
plt.ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏') # –ü–æ–¥–ø–∏—à–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏
plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞'); # –ü–æ–¥–ø–∏—à–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

"""## 2. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (bmi) **–∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π**, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ, —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥

–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è attr —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –≤ —Å–µ–±–µ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ —É **–∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π**
"""

pr = data[data['smoker'] == 'yes'] # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∫–æ–ª–æ–Ω–∫–µ smokers –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ yes
print(pr.head())

attr = pr['bmi'] / max(pr['bmi'])
target = pr['charges'] / 100

"""–°–µ–π—á–∞—Å –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–æ–º —á–∏—Å–ª–µ –æ –Ω–µ–∫—É—Ä—è—â–∏—Ö –ª—é–¥—è—Ö"""

x = torch.FloatTensor(attr) # –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ attr –∫ Tensor, —Å–æ—Å—Ç–æ—è—â–µ–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ float
y = torch.FloatTensor(target) # –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ target –∫ Tensor, —Å–æ—Å—Ç–æ—è—â–µ–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ float

"""**–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é MSE**:"""

def mse_m(y_pred,y_true):
    return torch.mean((y_pred - y_true)**2) # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–≤–æ–¥ MSE

w = torch.zeros(1, requires_grad = True)
b = torch.zeros(1, requires_grad = True)

y_pred = w * x + b
loss = mse_m(y_pred,y)
loss.backward()

loss

y_pred = w * x + b
loss = mse_m(y_pred,y)
loss.backward()

print('dl/dw = ', w.grad)
print('dl/db = ', b.grad)

w.grad.zero_()
b.grad.zero_()
w.grad, b.grad

from IPython.display import clear_output

def show_progress(x,y,y_pred,loss):
    y_pred = y_pred.detach()
    loss = loss.item()
    clear_output(wait=True)
    plt.figure(figsize=(10,7))
    plt.scatter(x,y,alpha = 0.75)
    plt.scatter(x,y_pred,color = 'orange',linewidth = 5)
    plt.show()

    print(f"MSE = {loss:.3f}")

loss = 0

"""–ó–∞–º–µ–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."""

w = torch.zeros(1, requires_grad = True) #–ø–∞—Ä–∞–º–µ—Ç—Ä requires_grad = True –Ω—É–∂–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
b = torch.zeros(1, requires_grad = True)
num_iter = 1000

lr_w = 0.1
lr_b = 0.1

for i in range(num_iter):
    y_pred = w*x + b
    loss = mse_m(y_pred,y) # –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É MSE
    loss.backward() # —Å–¥–µ–ª–∞–π—Ç–µ —Å–ø—É—Å–∫ –ø–æ –æ—à–∏–±–∫–µ (backward)

    w.data -= lr_w * w.grad.data # –î–æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ w
    b.data -= lr_b * b.grad.data # –î–æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ b

    w.grad.zero_()
    b.grad.zero_()
    if (i+1)%5 ==0:
        show_progress(x,y,y_pred,loss)
        if loss.item()<5000: # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—É—á–µ–Ω–∏—è
            print('Done')
            print(i)
            break

"""–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥ –æ –Ω–∞–π–¥–µ–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

–í—ã–≤–æ–¥: —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –ø—Ä—è–º–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç bmi –∫—É—Ä—è—â–∏—Ö –ª—é–¥–µ–π.

## –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –æ–¥–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è (2 –±–∞–ª–ª–∞)

–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —è–¥—Ä–æ
"""

np.random.seed(0)
x=2*torch.rand(100)
y=4+3*x**2 + torch.rand(100) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞—à—É–º–ª–µ–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

x = torch.FloatTensor(x)
y = torch.FloatTensor(y)

x_new = x.reshape(-1,1)
y_new = y.reshape(-1,1)

model1 = nn.Sequential(
    nn.Linear(in_features=1,out_features=1),
    nn.Tanh(),
    nn.Linear(in_features=1,out_features=1)
)
model1

optimizer = torch.optim.SGD(model1.parameters(), lr = 0.01) # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, lr - learning rate.

optim_func = nn.MSELoss() #–ù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ—Ç—Ä–∏–∫—É - MSE. –ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–µ—Ç—Ä–∏–∫–∞ –µ—Å—Ç—å –≤ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞ nn

num_iter = 1000
loss =0

for i in range(num_iter):
    y_pred = model1(x_new)
    loss = optim_func(y_pred,y_new)
    loss.backward() # 1. —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏
    optimizer.step() # 2. —à–∞–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    optimizer.zero_grad() # 3. –æ–±–Ω—É–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞?

    if (i+1)%5 ==0:
        show_progress(x,y,y_pred,loss)

        if loss.item()<1: # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—É—á–µ–Ω–∏—è
            print('Done')
            print(i)
            break

"""–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–ª–æ—Ö–æ –æ–±—É—á–∞–µ—Ç—Å—è, –ø—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –∫ optimizer.

## 4. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å **–±–æ–ª–µ–µ —á–µ–º** –æ–¥–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–ª–æ–µ  (2.5 –±–∞–ª–ª–∞)
"""

np.random.seed(0)
x=2*torch.rand(100)
y=4+3*x**2 + torch.rand(100) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞—à—É–º–ª–µ–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

x = torch.FloatTensor(x)
y = torch.FloatTensor(y)

x_new = x.reshape(-1,1)
y_new = y.reshape(-1,1)

model2 = nn.Sequential(
    nn.Linear(in_features=1,out_features=10),
    nn.Tanh(),
    nn.Linear(in_features=10,out_features=1)
)
model2

optimizer = torch.optim.SGD(model2.parameters(), lr = 0.01) # —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏ (–∑–∞–º–µ–Ω–∏–≤ –Ω–∞ model2), –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥

num_iter = 1000
loss =0

for i in range(num_iter):
    y_pred = model2(x_new)
    loss = optim_func(y_pred,y_new)
    loss.backward() # 1. —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏
    optimizer.step() # 2. —à–∞–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    optimizer.zero_grad() # 3. –æ–±–Ω—É–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞?

    if (i+1)%5 ==0:
        show_progress(x,y,y_pred,loss)

        if loss.item()<0.25: # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—É—á–µ–Ω–∏—è
            print('Done')
            print(i)
            break

"""–í—ã–≤–æ–¥: –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–π, –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç—Ç–µ—Ä–∞—Ü–∏–π —Å–º–æ–≥–ª–∞ –ø—Ä–∏–π—Ç–∏ –∫ –±–æ–ª–µ–µ –º–∞–ª–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –æ—à–∏–±–∫–∏.

## 5. (–ë–æ–Ω—É—Å) –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å **—Ç—Ä–µ–º—è —Å–ª–æ—è–º–∏** –∏ –¥–≤—É–º—è —Å–ª–æ—è–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –æ—à–∏–±–∫–æ–π **–Ω–µ –±–æ–ª–µ–µ 0.25** (1.5 –±–∞–ª–ª–∞)
"""

# –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—Å–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏
model3 = nn.Sequential(
    nn.Linear(in_features=1, out_features=10),
    nn.Tanh(),
    nn.Linear(in_features=10, out_features=10),
    nn.Tanh(),
    nn.Linear(in_features=10, out_features=1)
  # —É–∫–∞–∂–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤
  # –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –ø–æ–ª—é, –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª—É—á—à–∞—è: —Å–∏–≥–º–æ–∏–¥–∞, tanh –∏–ª–∏ relu)
  # –î–æ–ø–∏—à–∏—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å (–¥–≤–∞ —Å–ª–æ—è –∏ —Ñ-–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
)
model3

"""–û–±—É—á–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥ –æ –µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±–æ—Å–Ω—É–π—Ç–µ –µ–≥–æ."""

optimizer = torch.optim.SGD(model3.parameters(), lr = 0.01)
num_iter = 1000
loss =0

for i in range(num_iter):
    y_pred = model3(x_new)
    loss = optim_func(y_pred,y_new)
    loss.backward() # 1. —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏
    optimizer.step() # 2. —à–∞–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    optimizer.zero_grad() # 3. –æ–±–Ω—É–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞?

    if (i+1)%5 ==0:
        show_progress(x,y,y_pred,loss)

        if loss.item()<0.25: # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—É—á–µ–Ω–∏—è
            print('Done')
            print(i)
            break

"""–í—ã–≤–æ–¥: –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞: –±—ã—Å—Ç—Ä–æ —Å–º–æ–≥–ª–∞ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É, –≤—Å–µ–≥–æ –∑–∞ 229 –∏—Ç—Ç–µ—Ä–∞—Ü–∏–π(–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –±–æ–ª—å—à–µ) –±—ã–ª–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –æ—à–∏–±–∫–∞ –º–µ–Ω—å—à–µ 0.25, –º–æ–¥–µ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""